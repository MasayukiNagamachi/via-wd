#!/usr/bin/env node

// This file is distributed under the MIT license.
// See LICENSE file in the project root for details.

'use strict';

const program = require('commander');
const _ = require('lodash');
const fs = require('fs');
const ScriptRunner = require('..').ScriptRunner;
const logging = require('..').logging;

const DEFAULT_BROWSER = 'chrome';
const DEFAULT_CONCURRENCY = 1;
const DEFAULT_LOGGING = [];
const DEFAULT_SERVER = false;
const DEFAULT_SERVER_URI = 'http://localhost:4444/wd/hub';
const DEFAULT_BROWSER_OPTIONS = {};
const DEFAULT_SCRIPT_TIMEOUT = 10;

function parseOptionLogFilter(filter, filters) {
  const [logger, level] = _.split(filter, ':', 2);
  filters.push({logger: logger, level, level});
  return filters;
}

function parseOptionJSON(json, options) {
  const v = JSON.parse(json);
  return _.assign(options, v);
}

program
  .version(require('../package.json').version)
  .description(require('../package.json').description)
  .usage('[options] [URI, path to a navigation script or a window index starting with @ ...]')
  .option(
    '-a, --async',
    'Run the Javascript code asynchronously')
  .option(
    '-b, --browser <chrome or firefox>',
    `Browser where the JavaScript code will be run (default: ${DEFAULT_BROWSER})`,
    /^(chrome|firefox)$/,
    DEFAULT_BROWSER)
  .option(
    '-c, --concurrency <number>',
    `Number of ControlFlows to be run at the same time (default: ${DEFAULT_CONCURRENCY})`,
    (number) => parseInt(number),
    DEFAULT_CONCURRENCY)
  .option(
    '-l, --logging <logger:level>',
    `Filters for the local logging of selenium-webdriver (default: ${JSON.stringify(DEFAULT_LOGGING)})`,
    parseOptionLogFilter,
    DEFAULT_LOGGING)
  .option(
    '-o, --browser-options <json>',
    `Browser specific options (default: ${JSON.stringify(DEFAULT_BROWSER_OPTIONS)})`,
    parseOptionJSON,
    DEFAULT_BROWSER_OPTIONS)
  .option(
    '-s, --server [uri]',
    `Use a WebDriver server which is already running (default: ${DEFAULT_SERVER})`,
    DEFAULT_SERVER)
  .option(
    '--script-timeout <sec>',
    `Asynchronous script execution time limit in seconds (default: ${DEFAULT_SCRIPT_TIMEOUT})`,
    parseInt,
    DEFAULT_SCRIPT_TIMEOUT)
  .parse(process.argv);

if (program.server) {
  if (program.server === true) {
    program.server = DEFAULT_SERVER_URI;
  }
}

if (program.logging.length > 0) {
  logging.setSink((msg) => console.error(msg));
  logging.setFilters(program.logging);
  logging.enable();
}

const options = {
  async: program.async,
  browser: program.browser,
  browserOptions: program.browserOptions,
  concurrency: program.concurrency,
  scriptTimeout: program.scriptTimeout,
  server: program.server,
  uris: program.args
};

if (_.isEmpty(options.uris)) {
  options.uris = ['@current']
}

let script = '';
process.stdin.on('data', (str) => script += str);

let runner = null;
process.stdin.on('end', () => {
  runner = new ScriptRunner(options);
  runner.run(script).then(JSON.stringify).then(console.log);
});

process.on('SIGINT', () => {  // Ctrl-C
  if (_.isNil(runner)) {
    process.exit(1);
  } else {
    runner.abort();
  }
});
