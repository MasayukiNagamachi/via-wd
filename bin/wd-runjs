#!/usr/bin/env node
//
// Copyright (c) 2016 Masayuki Nagamachi <masayuki.nagamachi@gmail.com>
//
// This file is distributed under the MIT license.
// See LICENSE file in the project root for details.

'use strict';

const program = require('commander');
const _ = require('lodash');
const fs = require('fs');
const ScriptRunner = require('..').ScriptRunner;
const logging = require('..').logging;

const DEFAULT_BROWSER = 'chrome'
const DEFAULT_CONCURRENCY = 1
const DEFAULT_LOGGING = ''
const DEFAULT_SERVER = 'http://localhost:4444/wd/hub'

program
  .version(require('../package.json').version)
  .description(require('../package.json').description)
  .usage('[options] <uri ...>')
  .option(
    '-b, --browser <browser>',
    `Browser where the JavaScript code will be run (default: ${DEFAULT_BROWSER})`,
    /^(chrome|firefox)$/,
    DEFAULT_BROWSER)
  .option(
    '-c, --concurrency <number>',
    `Number of ControlFlows to be run at the same time (default: ${DEFAULT_CONCURRENCY})`,
    (number) => parseInt(number),
    DEFAULT_CONCURRENCY)
  .option(
    '-l, --logging <filters>',
    `Filters for the local logging of selenium-webdriver (default: '${DEFAULT_LOGGING}')`,
    (filters) => _(filters)
      .split(/\s*,\s*/)
      .map((filter) => _.zipObject(['logger', 'level'], _.split(filter, ':')))
      .value(),
    DEFAULT_LOGGING)
  .option(
    '-s, --server <uri>',
    `URI of a Selenium Server (default: ${DEFAULT_SERVER})`,
    DEFAULT_SERVER)
  .parse(process.argv);

if (program.args.length == 0) {
  console.error('URI is required');
  process.exit(1);
}

if (program.logging.length > 0) {
  logging.setSink((msg) => console.error(msg));
  logging.setFilters(program.logging);
  logging.enable();
}

const options = {
  browser: program.browser,
  concurrency: program.concurrency,
  server: program.server,
  uris: program.args
};

let script = '';
process.stdin.on('data', (str) => script += str);

let runner = null;
process.stdin.on('end', () => {
  runner = new ScriptRunner(options);
  runner.run(script).then(JSON.stringify).then(console.log);
});

process.on('SIGINT', () => {  // Ctrl-C
  if (_.isNil(runner)) {
    process.exit(1);
  } else {
    runner.abort();
  }
});
