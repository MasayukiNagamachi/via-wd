#!/usr/bin/env node

// This file is distributed under the MIT license.
// See LICENSE file in the project root for details.

'use strict';

const program = require('commander');
const _ = require('lodash');
const fs = require('fs');
const streamToString = require('stream-to-string');
const ScriptRunner = require('..').ScriptRunner;
const logging = require('..').logging;

const DEFAULT_ARGS = [];
const DEFAULT_BROWSER = 'chrome';
const DEFAULT_LOGGING = [];
const DEFAULT_SERVER = false;
const DEFAULT_SERVER_URI = 'http://localhost:4444/wd/hub';
const DEFAULT_BROWSER_OPTIONS = {};
const DEFAULT_SCRIPT_TIMEOUT = 10;

function parseOptionArg(arg, args) {
  return _.concat(args, arg);
}

function parseOptionLogFilter(filter, filters) {
  const [logger, level] = _.split(filter, ':', 2);
  filters.push({logger: logger, level, level});
  return filters;
}

function parseOptionJSON(json, options) {
  const v = JSON.parse(json);
  return _.assign(options, v);
}

program
  .version(require('../package.json').version)
  .description(require('../package.json').description)
  .usage('[options] [URI, path to a navigation script or a window index starting with @ ...]')
  .option(
    '-a, --script-args <arg>',
    'Arguments passed to the JavaScript code',
    parseOptionArg,
    DEFAULT_ARGS)
  .option(
    '-b, --browser <chrome or firefox>',
    'Browser where the JavaScript code will be run',
    /^(chrome|firefox)$/,
    DEFAULT_BROWSER)
  .option(
    '-l, --logging <logger:level>',
    'Filters for the local logging of selenium-webdriver',
    parseOptionLogFilter,
    DEFAULT_LOGGING)
  .option(
    '-o, --browser-options <json>',
    'Browser specific options',
    parseOptionJSON,
    DEFAULT_BROWSER_OPTIONS)
  .option(
    '-s, --server [uri]',
    'Use a WebDriver server which is already running',
    DEFAULT_SERVER)
  .option(
    '--async',
    'Run the JavaScript code asynchronously')
  .option(
    '--script-timeout <sec>',
    'Asynchronous script execution time limit in seconds',
    parseInt,
    DEFAULT_SCRIPT_TIMEOUT)
  .arguments('[targets...]')
  .action(async (targets) => {
    if (program.server) {
      if (program.server === true) {
        program.server = DEFAULT_SERVER_URI;
      }
    }

    if (program.logging.length > 0) {
      logging.setSink((msg) => console.error(msg));
      logging.setFilters(program.logging);
      logging.enable();
    }

    if (_.isEmpty(targets)) {
      targets = ['@current']
    }

    const options = {
      async: program.async,
      browser: program.browser,
      browserOptions: program.browserOptions,
      scriptArgs: program.scriptArgs,
      scriptTimeout: program.scriptTimeout,
      server: program.server
    };

    const runner = new ScriptRunner(options);

    process.on('SIGINT', () => {  // Ctrl-C
      if (_.isNil(runner)) {
        process.exit(1);
      } else {
        runner.abort();
      }
    });

    const script = await streamToString(process.stdin);
    console.log(JSON.stringify(await runner.run(script, targets)));
  })
  .parse(process.argv);
